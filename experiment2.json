[{"id":"16","title":"My Site","link":"http://vanessapoppe.me/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/my-site.png","tags":["Node.js","React","SCSS"],"gitHubLink":"https://github.com/vanessacor/my-site","date":"08/01/2020","deploy":"AWS - S3","description":"<p>As soon as I started my webdev learning journey I built a static web site to host all the projects I was doing. It was a simple HTML page, with basic CSS, and small bits of Javascript, and it was hosted on GitHub pages.</p>\n<p>At this point I felt that I could start tasting the waters in the job market and decided to invest in building a proper website, where I can introduce myself, as well as showcase my work.</p>\n<p>The decision of building it with React was based only in the fact that I wanted to consolidate my React skills.</p>\n<p>The content is written in <a href=\"https://github.com/vanessacor/my-site/tree/master/content\">Markdown files</a>, with a bit of &quot;front matter&quot; to store metadata. The content is read by a little <a href=\"https://github.com/vanessacor/my-site/blob/master/build/getFileData.js\">npm script</a> that relies on <a href=\"https://www.npmjs.com/package/markdown-it\">markdown.it</a> to handle the markdown to html conversion and then <a href=\"https://github.com/vanessacor/my-site/blob/master/build/getContent.js\">stores it</a> in a local json file.</p>\n<p>This allows me to easily keep my list of projects updated. And it was also fun to build!</p>\n<p>It's deployed on <a href=\"https://aws.amazon.com/s3/?nc=sn&amp;loc=0\">AWS S3</a> and distributed on <a href=\"https://aws.amazon.com/cloudfront/?nc2=type_a\">CloudFront</a>.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>Parse markdown files and extract metadata</li>\n<li>AWS - host and deploy a static website on S3;</li>\n<li>Secure a domain using AWS ACM.</li>\n<li>How to use CloudFront to serve the traffic accessed through the domain.</li>\n<li>How to create a cloud distribution using Route 53 and CloudFront.</li>\n<li>Basic and simple configuration of Babel and Webpack.</li>\n</ul>\n"},{"id":"15","title":"My Bookshelf","link":"https://agile-temple-24298.herokuapp.com/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/mybookshelf.png","tags":["Node.js","React","RESTfull API","SCSS"],"gitHubLink":"https://github.com/vanessacor/bookshelf-app","date":"05/28/2020","deploy":"Heroku","description":"<p>A web app to keep track of the books on your bookshelf.\nThis feels like I reach the end of a cycle. This is my first full stack project!\nIt's built with the MERN stack.</p>\n<p>On the backend, I built a Restful API, you can check it <a href=\"https://github.com/vanessacor/bookshelf-api\">here</a>.</p>\n<p>On the frontend I built a React app using <code>create-react-app</code> and SASS.\nThis is my final version of a book library. I had previously done two similar projects:</p>\n<ul>\n<li><a href=\"https://vanessacor.github.io/site/experiments/library/\">My Library</a> a static webpage built using HTML, CSS and vanilla Javascript, with no database.</li>\n<li><a href=\"https://pacific-hamlet-13856.herokuapp.com/catalog/book/list\">My Books</a> a backend rendered website built with Node.js, Express, Mongoose and EJS, with a MongoDB database.</li>\n</ul>\n<h4>What I learnt:</h4>\n<ul>\n<li>React - React Router, React DOM, React Developer Tools, JSX,</li>\n<li>RESTful API - Postman(testing),</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>implement authentication session and authorization rules</li>\n<li>I would change the file structure to use the React conventions;</li>\n</ul>\n"},{"id":"12","title":"Misstee","link":"https://vanessacor.github.io/site/experiments/games/misstee/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/misstee.png","tags":["HTML","Canvas","JavaScript","OPP"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/misstee","date":"02/01/2020","deploy":"GitHub Pages","description":"<p>After learning a bit on how to work with HTML <code>&lt;canvas&gt;</code> and <a href=\"https://vanessacor.github.io/site/experiments/canvas/night-sky/\">playing with it</a>, I decided to venture into making my own game! It takes inspiration from our lovely and sweet one ear cat Misstee and her love for shrimps.</p>\n<p>The logic is quite simple, Misstee has to try to eat all the shrimps she can while avoiding the poisoned chocolates. As the game advances the number of shrimps and chocolates on the screen increase making it more difficult to play.</p>\n<p>The game was built using HTML5 <code>&lt;canvas&gt;</code>, CSS and vanilla Javascript.\nI isolated the game logic in one main game class and and in a few more to represent the entities.\nEach entity has its set of attributes and methods. The attributes define the characteristics and the state and the methods define the behaviour. The <code>Game class</code> is responsible for all the dynamics: instantiating all the other elements; drawing the elements; animating the elements; managing all the collisions.</p>\n<p>There are also two other units that deal with the life cycle of the UI. One takes the user from the splash screen to the game and then to the score screen on game over. The other unit updates the score and lives during the game.</p>\n<h4>Annoying bug</h4>\n<p>It was a challenge to debug in canvas because a lot of things happen in a second. The game had this very annoying bug, The player would randomly lose all its lives or earn 20 points at once. It took a while to figure this out, because it seemed so random. It turned out to be a very simple mistake that I made in an <code>array.splice</code> method.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>JavaScript - drawing and animating on <code>&lt;canvas&gt;</code>. OOP, classes and methods.</li>\n</ul>\n"},{"id":"9","title":"Calculator","link":"https://vanessacor.github.io/site/experiments/calculator/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/calculator.png","tags":["HTML","CSS","JavaScript","BDD","Jasmine"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/calculator","date":"08/12/2019","deploy":"GitHub Pages","description":"<p>The final project of <a href=\"https://www.theodinproject.com/courses/web-development-101\">Web Development 101</a> course was to make an on-screen calculator using JavaScript, HTML, and CSS.</p>\n<p>Based on my previous good experience separating bussiness logic from the UI behaviours, and knowing this project was a bit more complex, I took the time to do proper analysis and design the program before starting.</p>\n<p>Having heard about the benefits of TDD and looking at the many requirements of this app, I thought it was a glorious opportunity to practice it myself. I wrote all the tests first using <a href=\"https://jasmine.github.io/\">Jasmine</a> and this approach helped me a lot, not just because it forced me to document all the rules but also because it allowed me to test everything every time I did a small change.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>JavaScript: more array methods, loops, and conditional statements.</li>\n<li>Debugging: Chrome DevTools.</li>\n<li>TDD: writing unit tests with Jasmine.</li>\n</ul>\n"},{"id":"8","title":"Cash Register","link":"https://vanessacor.github.io/site/experiments/cash-register/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/cash-register.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/cash-register","date":"07/02/2019","deploy":"GitHub Pages","description":"<p>The challenge was to build a simple cash register for an imaginary coffee shop and then add more features progressively:</p>\n<ul>\n<li>Allow the user to choose a category from a set list.</li>\n<li>Allow the user to delete items from the list.</li>\n<li>Conditionally format negative numbers.</li>\n</ul>\n<p>I decide to continue using only vanilla Javascript instead of learning libraries or frameworks. I wanted to have a shot at structuring the code, clearly separating the business logic for the UI side. On the business side we have core functions to add and remove items, and a couple of utility functions to calculate the total and format currency. The UI side is responsible for all the event handlers and the DOM manipulation. It's a very small program and very easy to read.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>Clean code: separating business logic from UI.</li>\n<li>DOM manipulation: create an element, set attribute, add class.</li>\n<li>JavaScript: arrays, high order functions like <code>reduce()</code>, scope, functions.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>Add more features such as editing items and ading categories.</li>\n</ul>\n"},{"id":"6","title":"Etch-a-Sketch","link":"https://vanessacor.github.io/site/experiments/etch-a-sketch/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/etch-a-sketch.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/rock-paper-scissors","date":"05/21/2019","deploy":"GitHub Pages","description":"<p>On my third project for <a href=\"https://www.theodinproject.com/courses/web-development-101\">Odin Project</a> I was asked to <em>“build a browser version of something between a sketchpad and an Etch-A-Sketch”</em> to flex my DOM manipulation skills.</p>\n<p>Because the goal was to learn DOM manipulation, the game is not drawn on HTML <code>&lt;canvas&gt;</code> but by using the <code>createElement()</code>, <code>appendChild()</code> and <code>removeChild(_)</code> methods.</p>\n<p>The program starts with the user choosing the number of squares per line. When the <code>input</code> event is triggered it creates a grid with the right number of divs. An event listener is added to each square so it can be painted when the user hovers it. The user can choose between color-off mode (the squares will be in grayscale) and color-on mode (the colors are randomized).</p>\n<p>I had a lot of fun with this one and I hope you enjoy it!</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>HTML: DOM API, append and remove elements, <code>setAttribute()</code>, setting style and classes on elements;</li>\n<li>Javascript: using Chrome DevTools to debug;</li>\n<li>CSS: more Grid and layout techniques,</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I believe now that this type of project would work better if it was built with the HTML canvas element.</li>\n<li>Validate the user input before creating the grid because despite the input having max 100, you can still type larger numbers, which will probably end up crashing the browser.</li>\n</ul>\n"},{"id":"5","title":"Concrete Surfers","link":"https://vanessacor.github.io/site/experiments/concrete-surfers/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/concrete-surfers.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/concrete-surfers","date":"04/04/2019","deploy":"GitHub Pages","description":"<p>The challenge was to create a simple landing page with HTML, CSS, and Javascript, with a simple form registration.</p>\n<p>I researched and learnt about landing pages, the good practices, what to include and how to include. I created a fake Concrete Surfers community, inspired by one of my hobbies, skateboarding. I imagined a simple page with the goal of building a community of people who like to skateboard and wanted to find other people to go out and skateboard together.</p>\n<p>The page has a brief description of the community, followed by the registration form for contact details, some testimonies from trustees, and a video last.</p>\n<p><strong>Note:</strong> Yes, it's me in the video almost crashing 😃.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>UI: what’s a landing page and best practices when creating one.</li>\n<li>HTML: DOM API.</li>\n<li>JavaScript: form validation, event <code>preventDefault()</code>.</li>\n<li>CSS: positioning (how to place a play button on top of the video element), more flexbox.</li>\n</ul>\n"},{"id":"4","title":"Rock Paper Scissors","link":"https://vanessacor.github.io/site/experiments/games/rock-paper-scissors/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/rock-paper-scissors.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/rock-paper-scissors","date":"03/14/2019","deploy":"GitHub Pages","description":"<p>This was another assignment for the <a href=\"https://www.theodinproject.com/courses/web-development-101\">Odin Project</a>. I was asked to create the classic game of Rock Paper Scissors that would be played on the console.</p>\n<p>I decided that this was a chance for me to integrate everything I had learnt up to that point, so I built a UI to recreate the classic RPS game, with the user playing against the computer, using HTML, CSS and vanilla JavaScript.</p>\n<p>The game program is wrapped in a main function that is called when the page is loaded. It sets up all the variables and adds the event listeners to the elements. When the user clicks on one of the choices, it first disables all the buttons and then sets a timeout to display the computer choice. The timeout add to the &quot;feeling&quot; of time.</p>\n<p>The round finishes when both computer and user choices are displayed, and the score is updated, and all the buttons are enabled again. The next round is now ready and waiting for the user to make the next move. In every round the program checks the score and if one of the players reaches 5 points the game is over and the winner is announced. Finally, a reset button is displayed so the user can start a new game.</p>\n<p>I learnt so much javascript doing this project. I remember how hard it was for me to understand some of the core concepts of JS (arguments, parameters, template literals) but with this project I felt like suddenly everything started making sense. Well, maybe not everything: the concept of async programming I only consolidated later, but that didn't stop me from using <code>addEVentListener()</code> and <code>setTimeout()</code> successfully.</p>\n<p>I am really proud of myself and I have to thank the help of <a href=\"https://andretorgal.com/\">Andre Torgal</a> and the coaches from <a href=\"https://codebar.io/barcelona\">CodeBar Barcelona</a>.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>JavaScript: conditional operators, functions (declaration, parameters and return value), arrow functions, loops, template literals, timeouts.</li>\n<li>CSS: media-queries, grid.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I definitely would separate the business logic from UI logic, that's a distinction that I wasn't aware of at the time.</li>\n</ul>\n"},{"id":"3","title":"Photo Gallery","link":"https://vanessacor.github.io/site/experiments/photo-gallery/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/photo-gallery.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/photo-gallery","date":"03/12/2019","deploy":"GitHub Pages","description":"<p>I wanted to create another web page where I would be able to apply my new CSS skills, namely, responsive web-design and mobile first approach.</p>\n<p>I decided that a photo galery of my instagram photos would be a good project.</p>\n<h4>Things I learnt:</h4>\n<ul>\n<li>HTML - best practices</li>\n<li>CSS - flex box model</li>\n</ul>\n<h4>Things I would do different now:</h4>\n<ul>\n<li>I would try to use instagram API to update this page every time I posted something on my Instagram account.</li>\n</ul>\n"},{"id":"2","title":"African Elephant","link":"https://vanessacor.github.io/site/experiments/african-elephant/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/african-elephant.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/african-elephant","date":"02/18/2019","deploy":"GitHub Pages","description":"<p>In order to consolidate my learning of HTML and CSS I created another web page, an info page (content from wikipedia) about my favourite animal.</p>\n<p>Because I started learning JavaScript following the curriculum in the Odin Project, I decided to include a go-to top button with JS. I looked at examples and adapted to this exercise.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>JavaScript: functions, <code>addEventListener()</code>, <code>if(...)</code> statements, style attributes;</li>\n<li>CSS: box model, responsive web design.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>Looking at the code, I definitely would structure the HTML differently, with less divs, and would use the css selectors more wisely, for instance not using <em>#id</em> in every element. At the time, it was quite hard for me to know when to apply classes and ids.</li>\n</ul>\n"},{"id":"1","title":"First Layout","link":"https://vanessacor.github.io/site/experiments/my_journey","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/first-layout.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/my_journey","date":"02/11/2019","deploy":"GitHub Pages","description":"<p>When I started to learn web-development, I found the Odin Project and decided to do the <a href=\"https://www.theodinproject.com/courses/web-development-101\">Web development 101</a> course. The first assignment was to clone the Google Homepage. It was a very simple exercise but I remember how much I enjoyed seeing my work on the web-browser.</p>\n<p>My goal here was to build a simple web page with just HTML and CSS using all I had learnt on the first modules of the course. I tried to do the simplest thing and play a bit with the CSS. My intention here was also to document my learning journey weekly but for some reason I got too hooked on coding and didn't make time for the writing.</p>\n<h4>What I learnt:</h4>\n<ul>\n<li>Git/GitHub: create a repository, clone, add, commit and push.</li>\n<li>HTML: structure and semantics, elements, tags, attributes.</li>\n<li>CSS: elements, selectors, declarations, properties and values.</li>\n<li>How to include google fonts and fontawesome icons.</li>\n</ul>\n"}]