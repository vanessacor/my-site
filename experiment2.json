[{"id":"16","title":"My Site","link":"http://vanessapoppe.me/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/my-site.png","tags":["Node.js","React","SCSS"],"gitHubLink":"https://github.com/vanessacor/my-site","date":"08/01/2020","deploy":"AWS - S3","description":"<p>As soon as I started my webdev learning journey I built a static web site to host all the projects I was doing. It was a simple HTML page, with basic CSS, and small bits of Javascript, and it was hosted on GitHub pages.</p>\n<p>At this point I felt that I could start tasting the waters in the job market and decided to invest in building a proper website, where I can introduce myself, as well as showcase my work.</p>\n<p>The decision of building it with React was based only in the fact that I wanted to consolidate my React skills.</p>\n<p>The content is written in [Markdown files](link!!! To the girth content/ folder), with a bit of &quot;front matter&quot; to store metadata. The content is read at build time by a little [npm script](link!!! To GitHub src file) that relies on <a href=\"https://www.npmjs.com/package/markdown-it\">markdown.it</a> to handle the markdown to html conversion and then stores it in a local json file.</p>\n<p>This allows me to easily to keep my list of projects updated. And it was also fun to build!</p>\n<p>It's deployed on <a href=\"https://aws.amazon.com/s3/?nc=sn&amp;loc=0\">AWS S3</a> and distributed on <a href=\"https://aws.amazon.com/cloudfront/?nc2=type_a\">CloudFront</a>.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>Parse markdown files and extract metadata</li>\n<li>AWS - host and deploy a static website on S3;</li>\n<li>Secure a domain using AWS ACM.</li>\n<li>How to use CloudFront to serve the traffic accessed through the domain.</li>\n<li>How to create a cloud distribution using Route 53 and CloudFront.</li>\n<li>Basic and simple configuration of Babel and Webpack.</li>\n</ul>\n"},{"id":"15","title":"My Bookshelf","link":"https://agile-temple-24298.herokuapp.com/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/mybookshelf.png","tags":["Node.js","React","RESTfull API","SCSS"],"gitHubLink":"https://github.com/vanessacor/bookshelf-app","date":"05/28/2020","deploy":"Heroku","description":"<p>This feels like I reach the end of a cycle.\nMy Bookshelf is my first fullStack project!\nI built this React App almost from scratch (I use React Create app) and learnt the basics of working with React like React Router.\nOn the backend side, I created a Restful API using Node.js, express, mongoose.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>React - React Router, React DOM, React Developer Tools, JSX,</li>\n<li>RESTful API - Postman(testing),</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I would change the file structure to use the React convenctions</li>\n</ul>\n"},{"id":"14","title":"Meme Generator","link":"https://vanessacor.github.io/meme-generator/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/meme-generator.png","tags":["Node.js","React","SASS"],"gitHubLink":"https://github.com/vanessacor/meme-generator","date":"04/09/2020","deploy":"GitHub Pages","description":"<p>Heard some much about React and how it is important today for a front-end developer to know how to work with. After searching for some tutorial I chose to follow <a href=\"https://scrimba.com/g/glearnreact\">this great tutorial </a> by Bob Ziroll.\nThis simple page is a meme generator built with Create React APP, it takes two text inputs, to be displayed at the top and bottom of the image. The user has the choice to change the image randomly.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>React - props and state, components and class components, lifecycle methods, fetching data from API.</li>\n</ul>\n"},{"id":"13","title":"My Books","link":"https://pacific-hamlet-13856.herokuapp.com/catalog","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/mybooks.png","tags":["Node.js","Express","MongoDB","SASS"],"gitHubLink":"https://github.com/vanessacor/bookeshelf","date":"03/30/2020","deploy":"Heroku","description":"<p>After learning the basics of node.js and express with this tutorial, I decided to rebuild <a href=\"https://vanessacor.github.io/site/experiments/library/\">My Library</a> now with node.js, express, EJS and MongoDB.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>MongoDB - CRUD</li>\n<li>Express - models, views and controllers (MVC), routes.</li>\n<li>JavaScript - promises, ES6 best practices;</li>\n<li>SASS - best practices, variables, mixins.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li></li>\n</ul>\n"},{"id":"12","title":"Misstee","link":"https://vanessacor.github.io/site/experiments/games/misstee/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/misstee.png","tags":["HTML","Canvas","JavaScript","OPP"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/misstee","date":"02/01/2020","deploy":"GitHub Pages","description":"<p>After learning a bit on how to work with HTML Canvas, I decided to adventure myself on making my own canvas html game! The game takes inspiration from our lovely and sweet one ear cat Misstee and her love for shrimps.</p>\n<p>The game is very simple, Misstee has to try to eat all the shrimps she can while avoiding the poisoned chocolates. As the game advances the number of shrimps and chocolates on the screen increase making it more difficult to play.</p>\n<h4>Annoying bug</h4>\n<p>It was a challenge to debug in canvas because a lot of things happen in the same frame. The game had this very annoying bug, it seemed that at some random times the player would lose all its lives at once or earn 20 points at once. It took a while to figure this out, because it seemed so random. It turned out to be a very simple mistake that I made in an array.splice method.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>JavaScript - drawing and animating on canvas. OOP, classes and methods.</li>\n</ul>\n"},{"id":"11","title":"Canvas","link":"https://vanessacor.github.io/site/experiments/canvas/canvas-art/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/canvasArt.png","tags":["HTML","Canvas","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/blob/master/experiments/canvas/canvas-art/script.js","date":"01/12/2020","deploy":"GitHub Pages","description":"<p>Canvas is fun! I made these pages by following the tutorials from <a href=\"https://www.youtube.com/watch?v=EO6OkltgudE&amp;feature=youtu.be\">Chris Courses</a></p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>\n<p>HTML - canvas</p>\n</li>\n<li>\n<p>JavaScript - drawing on canvas and basic animations.</p>\n</li>\n</ul>\n"},{"id":"10","title":"Library","link":"https://vanessacor.github.io/site/experiments/library/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/my-books.png","tags":["HTML","CSS","JavaScript","BDD"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/library","date":"09/12/2019","deploy":"GitHub Pages","description":"<p>After finishing the front-end module of the 101 web-development I jumped into the <a href=\"https://www.theodinproject.com/courses/javascript\">JavaScript course</a>. This was the first project and my first experience with Object-oriented programming - OOP.</p>\n<p>The challenge was to create a simple library app. The user can add books with its title, author, genre and status. Users can delete and edit books.\nThe program has three main object: the book object with we create new Books, the library object where its methods are responsible for the business side, like add book, delete book, get list of books. The third object is the library UI where all the event handlers and UI methods are defined.\nI used the behavioral test driven approach for the business logic.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>JavaScript - objects and object constructor, properties and methods.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li><a href=\"https://pacific-hamlet-13856.herokuapp.com/catalog\">This</a>.</li>\n</ul>\n"},{"id":"9","title":"Calculator","link":"https://vanessacor.github.io/site/experiments/calculator/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/calculator.png","tags":["HTML","CSS","JavaScript","BDD","Jasmine"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/calculator","date":"08/12/2019","deploy":"GitHub Pages","description":"<p>The final project of <a href=\"https://www.theodinproject.com/courses/web-development-101\">Web development 101</a> course was to make an on-screen calculator using JavaScript, HTML, and CSS.</p>\n<p>Based on my previous good experience separatingbussiness logic and the UI behaviours, and knowing this project was more complex, I took the time to design the program before starting. I ended up designing a calculator unit, where the API is a single <code>processKey()</code> method that implements</p>\n<p>Having had heard about the benefits of TDD and looking at the API of the business logic of this app, I thought it was a glorious opportunity to practice it myself so I first created the tests using <a href=\"https://jasmine.github.io/\">Jasmine</a>. Following this approach helped me a lot, not just on knowing what functions I needed but most important how to structure of the program.</p>\n<p>On the UI side the program is responsible for the event handlers and updating the DOM.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>JavaScript - arrays methods, loop and conditional statements, debugging (dev-tools), BDD using jasmine.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I would try to implement PEMDAS and would add more complex operations.</li>\n</ul>\n"},{"id":"8","title":"Cash Register","link":"https://vanessacor.github.io/site/experiments/cash-register/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/cash-register.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/cash-register","date":"07/02/2019","deploy":"GitHub Pages","description":"<p>The challenge was to build a simple cash register for an imaginary coffee shop and then add more features progressively:</p>\n<ul>\n<li>Allow the user to choose a category from a set list.</li>\n<li>Allow the user to delete items from the list.</li>\n<li>Conditionally format negative numbers.</li>\n</ul>\n<p>I decide to continue using only vanila Javascript instead of learning libraries or frameworks. I wanted to have a shot at structuring the code, clearly separating the business logic for the UI side. On the business side we have a the core functions to add and remove items, and a couple of utility functions to calculate the total and format currency. The UI side is responsible for all the event handlers and the DOM manipulation. It's a very small program and very easy to read.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>Clean code: separating business logic from UI.</li>\n<li>DOM manipulation: create an element, set attribute, add class.</li>\n<li>JavaScript: arrays, <em>reduce()</em>, scope, functions.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>Add more features such as editing items and ading categories.</li>\n</ul>\n"},{"id":"7","title":"Utopian News","link":"https://vanessacor.github.io/site/experiments/utopian/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/utopian.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/utopian","date":"06/04/2019","deploy":"GitHub Pages","description":"<p>This page was inspired by my youngest son and his love for History and alternative history. This is a newspaper website for the fictional Utopian Country.</p>\n<p>The page has a header with a navbar, a main element with sections and articles and a footer with info about the newspaper.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>CSS: more Grid, more practice.</li>\n<li>Javascript: date formatting (I know it can be done with libraries such as <em>moment</em> but I wanted to try it by myself).</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>The design is a bit uninspired and it made it harder to actually practice.</li>\n<li>The html structure reflects this, I think I was a bit confused about what I was trying to achieve.</li>\n<li>In terms of responsiveness a lot could be improved.</li>\n</ul>\n"},{"id":"6","title":"Etch-a-Sketch","link":"https://vanessacor.github.io/site/experiments/etch-a-sketch/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/etch-a-sketch.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/rock-paper-scissors","date":"05/21/2019","deploy":"GitHub Pages","description":"<p>On my third project for <a href=\"https://www.theodinproject.com/courses/web-development-101\">Odin Project</a> I was asked to <em>“build a browser version of something between a sketchpad and an Etch-A-Sketch”</em> to flex my DOM manipulation skills.</p>\n<p>Because the goal was to learn DOM manipulation, the game is not draw on HTML canvas but by using the <em>createElement()</em>, appendChild() and <em>removeChild(</em>) methods.</p>\n<p>The program starts with the user choosing the number of squares per line. When the <em>input</em> event is triggered it creates a grid with the right number of divs. An event listener is added to each square so it can be painted when the user hovers it. The user can choose between color-off mode (the squares will be in grayscale) and color-on mode (the colors are randomized).</p>\n<p>I had a lot of fun with this one and I hope you enjoy it!</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>HTML: DOM API, append and remove elements, <em>setAttribute()</em>, setting style and classes on elements;</li>\n<li>Javascript: using Chrome DevTools to debug;</li>\n<li>CSS: more Grid and layout techniques,</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I believe now that this type of project would work better if it was built with the HTML canvas element.</li>\n<li>Validate the user input before creating the grid because despite the input having max 100, you can still type larger numbers, which will probably end up crashing the browser.</li>\n</ul>\n"},{"id":"5","title":"Concrete Surfers","link":"https://vanessacor.github.io/site/experiments/concrete-surfers/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/concrete-surfers.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/concrete-surfers","date":"04/04/2019","deploy":"GitHub Pages","description":"<p>The challenge was to create a simple landing page with HTML, CSS, and Javascript, with a simple form registration.</p>\n<p>I researched and learnt about landing pages, the good practices, what to include and how to include. I created a fake Concrete Surfers community, inspired by one of my hobbies, skateboarding. I imagined a simple page with the goal of building a community of people who like to skateboard and wanted to find other people to go out and skateboard together.</p>\n<p>The page has a brief description of the community, followed by the registration form for contact details, some testimonies from trustees, and a video last.</p>\n<p><strong>Note:</strong> Yes, it's me in the video almost crashing 😃.</p>\n<h4>What have I learnt:</h4>\n<ul>\n<li>UI: what’s a landing page and best practices when creating one.</li>\n<li>HTML: DOM API.</li>\n<li>JavaScript: form validation, event <em>preventDefault()</em>.</li>\n<li>CSS: positioning (how to place a play button on top of the video element), more flexbox.</li>\n</ul>\n"},{"id":"4","title":"Rock Paper Scissors","link":"https://vanessacor.github.io/site/experiments/games/rock-paper-scissors/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/rock-paper-scissors.png","tags":["HTML","CSS","JavaScript"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/games/rock-paper-scissors","date":"03/14/2019","deploy":"GitHub Pages","description":"<p>This was another assignment for the <a href=\"https://www.theodinproject.com/courses/web-development-101\">Odin Project</a>. I was asked to create the classic game of Rock Paper Scissors that would be played on the console.</p>\n<p>I decided that this was a chance for me to integrate everything I had learnt up to that point, so I built a UI to recreate the classic RPS game, with the user playing against the computer, using HTML, CSS and vanilla JavaScript.</p>\n<p>The game program is wrapped in a main function that is called when the page is loaded. It sets up all the variables and adds the event listeners to the elements. When the user clicks on one of the choices, it first disables all the buttons and then sets a timeout to display the computer choice. The timeout add to the &quot;feeling&quot; of time.</p>\n<p>The round finishes when both computer and user choices are displayed, and the score is updated, and all the buttons are enabled again. The next round is now ready and waiting for the user to make the next move. In every round the program checks the score and if one of the players reaches 5 points the game is over and the winner is announced. Finlly, a reset button is displayed so the user can start a new game.</p>\n<p>I learnt so much javascript doing this project. I remember how hard it was for me to understand some of the core concepts of JS (arguments, parameters, template literals) but with this project I felt like suddenly everything started making sense. Well, maybe not everything: the concept of async programming I only consolidated later, but that didn't stop me from using <em>addEVentListener()</em> and <em>setTimeout()</em> successfully.</p>\n<p>I am really proud of myself and I have to thank the help of <a href=\"https://andretorgal.com/\">Andre Torgal</a> and the coaches from <a href=\"https://codebar.io/barcelona\">CodeBar Barcelona</a>.</p>\n<h4>What I have learnt:</h4>\n<ul>\n<li>JavaScript: conditional operators, functions (declaration, parameters and return value), arrow functions, loops, template literals, timeouts.</li>\n<li>CSS: media-queries, grid.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>I definitely would separate the business logic from UI logic, that's a distinction that I wasn't aware of at the time.</li>\n</ul>\n"},{"id":"3","title":"Photo Gallery","link":"https://vanessacor.github.io/site/experiments/photo-gallery/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/photo-gallery.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/photo-gallery","date":"03/12/2019","deploy":"GitHub Pages","description":"<p>I wanted to create another web page where I would be able to apply my new CSS skills, namely, responsive web-design and mobile first approach.</p>\n<p>I decided that a photo galery of my instagram photos would be a good project.</p>\n<h4>Things I have learnt:</h4>\n<ul>\n<li>HTML - best practices</li>\n<li>CSS - flex box model</li>\n</ul>\n<h4>Things I would do different now:</h4>\n<ul>\n<li>I would try to use instagram API to update this page every time I posted something on my Instagram account.</li>\n</ul>\n"},{"id":"2","title":"African Elephant","link":"https://vanessacor.github.io/site/experiments/african-elephant/","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/african-elephant.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/african-elephant","date":"02/18/2019","deploy":"GitHub Pages","description":"<p>In order to consolidate my learning of HTML and CSS I created another web page, an info page (content from wikipedia) about my favourite animal.</p>\n<p>Because I started learning JavaScript following the curriculum in the Odin Project, I decided to include a go to top button with JS. I looked at examples and adapted to this exercise.</p>\n<h4>What I have learnt:</h4>\n<ul>\n<li>JavaScript: functions, <em>addEventListener()</em>, <em>if(...)</em> statements, style attributes;</li>\n<li>CSS: box model, responsive web design.</li>\n</ul>\n<h4>What I would do differently:</h4>\n<ul>\n<li>Looking at the code, I definitely would structure the HTML differently, with less divs, and would use the css selectors more wisely, for instance not using <em>#id</em> in every element. At the time, it was quite hard for me to know when to apply classes and ids.</li>\n</ul>\n"},{"id":"1","title":"First Layout","link":"https://vanessacor.github.io/site/experiments/my_journey","image":"https://media-vanessapoppe-me.s3-eu-west-1.amazonaws.com/images/screenshots/first-layout.png","tags":["HTML","CSS","Git/GitHub"],"gitHubLink":"https://github.com/vanessacor/site/tree/master/experiments/my_journey","date":"02/11/2019","deploy":"GitHub Pages","description":"<p>When I started to learn web-development, I found the Odin Project and decided to do the <a href=\"https://www.theodinproject.com/courses/web-development-101\">Web development 101</a> course. The first assignment was to clone the Google Homepage. It was a very simple exercise but I remember how much I enjoyed seeing my work on the web-browser.</p>\n<p>My goal here was to build a simple web page with just HTML and CSS using all I had learnt on the first modules of the course. I tried to do the simplest thing and play a bit with the CSS. My intention here was also to document my learning journey weekly but for some reason I got too hooked on coding and didn't make time for the writing.</p>\n<h4>What I have learnt:</h4>\n<ul>\n<li>Git/GitHub: create a repository, clone, add, commit and push.</li>\n<li>HTML: structure and semantics, elements, tags, attributes.</li>\n<li>CSS: elements, selectors, declarations, properties and values.</li>\n<li>How to include google fonts and fontawesome icons.</li>\n</ul>\n"}]